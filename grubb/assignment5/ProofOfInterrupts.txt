In all circumstances, xv6 eventually time-slices away from a CPU-bound process. in the lapicinit (7408) the LAPIC is told to periodically interrupt, allowing the kernel to trap and schedule other processes. While xv6 concedes it doesn't care about precise timekeeping (it would need to be calibrated using an external source), we can assume that the LAPIC eventually always sends a timer interrupt, now matter how inaccurate its timekeeping. 

Therefore, the only way a CPU-bound process can't be time sliced away is if interrupts are disabled while a user process is running. The cli() (0557) function is used to disable interrupts. However, it is only directly used in kernel panic situations. Otherwise, all interrupts are disabled using pushcli() (1655) and enabled using popcli() (1667) which is wrapped around the sti() (0563) command.

So we must show that for every popcli() that pushcli() is called without going into userspace. We can see this is true in switchuvm() (1860) where between the pushcli() call (1869) and the popcli() call (1880) it remains out of user space. This is the same with myproc() (2457) from pushcli() (2460) to popcli() (2463).

The main issue is popcli() is called inside of the kernel's spinlock acquire() (1576) and popcli() is called inside of the release method (1622). So we have to ensure that this spinlock implementation is never held when switching to a user bound process. Looking at all instances of acquire called in xv6 (2478, 2548, 2614, 2649, 2677, 2769, 2830, 2891, 2906, 2966, 2979, 3175, 3192, 3416, 3822, 3842, 4309, 4365, 4470, 4533, 4624, 4636, 4655, 4830, 4857, 4876, 4931, 5258, 5291, 5362, 5375, 5880, 5904, 5918, 6813, 6834, 6855, 8010, 8181, 8228, 8264) we can reasonably say this is true.

From there, we view the interrupt response in xv6. A timer interrupt will be caught at line 3473. This calls the yield() function (2828) which schedules another function. The shows that eventually, the kernel will always time-slice away from a CPU-bound process and deschedule the running one and schedule something else.
